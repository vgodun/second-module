name: Deploy

on:
  push:
    branches:
      - main

jobs:
  check-folder:
    runs-on: ubuntu-latest
    outputs:
      backend_rds: ${{ steps.check-folder.outputs.backend_rds }}
      backend_redis: ${{ steps.check-folder.outputs.backend_redis }}
      frontend: ${{ steps.check-folder.outputs.frontend }}



    steps:
      - name: Checkout code
       uses: actions/checkout@v3
       run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^backend_rds/'; then
            echo "::set-output name=backend_rds_changed::true"
          else
            echo "::set-output name=backend_rds_changed::false"
          fi 

      - name: Check if backend_redis files have changed
        id: check_redis
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^backend_redis/'; then
            echo "::set-output name=backend_redis_changed::true"
          else
            echo "::set-output name=backend_redis_changed::false"
          fi

      - name: Check if frontend files have changed
        id: check_frontend
        run: |
          if git diff --name-only ${{ github.event.before }} ${{ github.sha }} | grep -q '^frontend/'; then
            echo "::set-output name=frontend_changed::true"
          else
            echo "::set-output name=frontend_changed::false"
          fi
  
   build_and_deploy_rds_master:
    runs-on: ubuntu-latest
    needs: check_folder_changes
    if: needs.check_folder_changes.outputs.backend_rds_changed == 'true' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image for backend_rds
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t prod_rds:$IMAGE_TAG ./backend_rds
          docker tag prod_rds:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod_rds:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod_rds:$IMAGE_TAG

      - name: Deploy backend_rds to EC2 (Master)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          IMAGE_TAG: ${{ github.sha }}
          CONTAINER_NAME: backend_rds
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ec2-user@${{ secrets.EC2_HOST_PROD }} << EOF
          IMAGE_TAG=${{ github.sha }}
            aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
            docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod_rds:$IMAGE_TAG
            sed -i '/backend_rds:/,/image:/s|image: .*|image: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod_rds:$IMAGE_TAG|g' docker-compose.yml
             if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
            echo "Контейнер $CONTAINER_NAME працює. Зупиняємо..."
            
            # Зупиняємо контейнер
            docker-compose stop $CONTAINER_NAME || echo "Failed to stop the container$CONTAINER_NAME"
            
            else
                echo "Container $CONTAINER_NAME is not running. Starting..."
                
                # Запускаємо контейнер
                docker-compose up -d $CONTAINER_NAME || echo "Failed to start the container $CONTAINER_NAME"
            fi
          EOF
          rm /tmp/ssh_key

   build_and_deploy_redis_master:
    runs-on: ubuntu-latest
    needs: check_folder_changes
    if: needs.check_folder_changes.outputs.backend_redis_changed == 'true' && github.ref == 'refs/heads/master'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY_PROD }}
          known_hosts: 'just-a-placeholder-so-we-dont-get-errors'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Log in to Amazon ECR
        run: aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

      - name: Build and push Docker image for backend_redis
        run: |
          IMAGE_TAG=${{ github.sha }}
          docker build -t ${{ secrets.AWS_ECR_RDS_PROD }}:$IMAGE_TAG ./backend_redis
          docker tag ${{ secrets.AWS_ECR_RDS_PROD }}:$IMAGE_TAG ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod_redis:$IMAGE_TAG
          docker push ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/prod_redis:$IMAGE_TAG

      - name: Deploy backend_redis to EC2 (Master)
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCOUNT_ID: ${{ secrets.AWS_ACCOUNT_ID }}
          IMAGE_TAG: ${{ github.sha }}
          CONTAINER_NAME: backend_redis
        run: |
          echo "${{ secrets.SSH_PRIVATE_KEY_PROD }}" > /tmp/ssh_key
          chmod 600 /tmp/ssh_key
          ssh -o StrictHostKeyChecking=no -i /tmp/ssh_key ec2-user@${{ secrets.EC2_HOST_PROD }} << EOF
            aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com
            docker pull $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/prod_redis:$IMAGE_TAG
            sed -i '/backend_redis:/,/image:/s|image: .*|image: $AWS_ACCOUNT_ID.dkr.ecr.$AWS_REGION.amazonaws.com/prod_redis:$IMAGE_TAG|g' docker-compose.yml
            if [ "$(docker ps -q -f name=$CONTAINER_NAME)" ]; then
            echo "Container $CONTAINER_NAME is running. Stopping..."
            
            # Зупиняємо контейнер
            docker-compose stop $CONTAINER_NAME || echo "Failed to stop the container $CONTAINER_NAME"
            
            else
                echo "Container $CONTAINER_NAME is not running. Starting..."
                
                # Запускаємо контейнер
                docker-compose up -d $CONTAINER_NAME || echo "Failed to start the container $CONTAINER_NAME"
            fi
          EOF
          rm /tmp/ssh_key


    deploy_frontend_to_s3_master:
      runs-on: ubuntu-latest
      needs: check_folder_changes
      if: needs.check_folder_changes.outputs.frontend_changed == 'true' && github.ref == 'refs/heads/master'
      steps:
        - name: Checkout code
          uses: actions/checkout@v2

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION_S3 }}

        - name: Check if frontend files have changed
          id: check_frontend
          uses: dorny/paths-filter@v2
          with:
            filters: |
              frontend_changed:
                - 'frontend/**'

        - name: Remove old files from S3
          if: steps.check_frontend.outputs.frontend_changed == 'true'
          run: |
            aws s3 rm s3://${{ secrets.S3_BUCKET_NAME_PROD }} --recursive

        - name: Upload new frontend files to S3
          if: steps.check_frontend.outputs.frontend_changed == 'true'
          run: |
            aws s3 sync ./frontend s3://${{ secrets.S3_BUCKET_NAME_PROD }} --delete

    

       
       
